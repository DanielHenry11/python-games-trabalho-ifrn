import random  # Importa a biblioteca random para gerar n√∫meros aleat√≥rios
import time    # Importa a biblioteca time para usar pausas temporais (como o sleep)

# Fun√ß√£o do jogo da adivinha√ß√£o
def jogo_adivinha√ß√£o():
    n√∫mero_secreto = random.randint(1, 100)  # Gera um n√∫mero aleat√≥rio entre 1 e 100
    tentativas = 0  # Inicializa o contador de tentativas

    print('Bem-vindo ao jogo de adivinha√ß√£o!')
    print('Tente adivinhar o n√∫mero que estou pensando, entre 1 e 100.')

    while True:  # Loop at√© o jogador acertar
        palpite = input('Digite seu palpite: ')  # Recebe o palpite do jogador
        if not palpite.isdigit():  # Verifica se o palpite √© um n√∫mero
            print('Digite um n√∫mero v√°lido.')
            continue  # Volta para o in√≠cio do loop

        palpite = int(palpite)  # Converte o palpite para inteiro
        tentativas += 1  # Incrementa o n√∫mero de tentativas

        if palpite == n√∫mero_secreto:  # Verifica se o palpite est√° correto
            print(f'PARAB√âNS! Voc√™ acertou ap√≥s {tentativas} tentativas.')
            break  # Encerra o jogo se acertar
        elif palpite < n√∫mero_secreto:
            print('O n√∫mero √© maior.')  # Dica: o n√∫mero secreto √© maior
        else:
            print('O n√∫mero √© menor.')  # Dica: o n√∫mero secreto √© menor

# Fun√ß√£o principal do jogo da velha, com op√ß√£o contra a m√°quina
def jogo_da_velha(contra_maquina=False):
    tabuleiro = [[" " for _ in range(3)] for _ in range(3)]  # Cria um tabuleiro 3x3 vazio

    # Fun√ß√£o para exibir o tabuleiro formatado
    def mostrar_tabuleiro(tabuleiro):
        print("   0   1   2")  # Cabe√ßalho das colunas
        for i in range(3):
            # Exibe cada linha com separadores verticais
            print(f"{i}  {tabuleiro[i][0]} | {tabuleiro[i][1]} | {tabuleiro[i][2]}")
            if i < 2:
                print("  ---+---+---")  # Linhas divis√≥rias

    # Fun√ß√£o para verificar se um jogador venceu
    def verificar_vitoria(tab, jogador):
        # Verifica todas as linhas
        for linha in tab:
            if all(c == jogador for c in linha):
                return True
        # Verifica todas as colunas
        for col in range(3):
            if all(tab[linha][col] == jogador for linha in range(3)):
                return True
        # Verifica diagonal principal
        if all(tab[i][i] == jogador for i in range(3)):
            return True
        # Verifica diagonal secund√°ria
        if all(tab[i][2 - i] == jogador for i in range(3)):
            return True
        return False  # Se n√£o houver vit√≥ria

    # Fun√ß√£o para verificar se houve empate
    def verificar_empate(tab):
        # Retorna True se todas as casas estiverem preenchidas
        return all(c != " " for linha in tab for c in linha)

    jogador = 'X'  # O jogador 'X' sempre come√ßa

    while True:  # Loop principal do jogo
        mostrar_tabuleiro(tabuleiro)  # Mostra o estado atual do tabuleiro
        print(f"\nVez do jogador {jogador}")  # Indica de quem √© a vez

        if contra_maquina and jogador == 'O':  # Se for a vez da m√°quina
            print("O computador est√° pensando...\n")  # Mensagem de espera
            time.sleep(1.5)  # Aguarda 1.5 segundos
            # Cria uma lista com todas as jogadas poss√≠veis (casas vazias)
            jogadas_disponiveis = [(i, j) for i in range(3) for j in range(3) if tabuleiro[i][j] == " "]
            linha, coluna = random.choice(jogadas_disponiveis)  # Escolhe uma posi√ß√£o aleat√≥ria
            print(f"A m√°quina jogou na posi√ß√£o {linha}, {coluna}")  # Informa a jogada da m√°quina
        else:
            try:
                linha = int(input("Digite a linha (0, 1 ou 2): "))  # Recebe a linha do jogador
                coluna = int(input("Digite a coluna (0, 1 ou 2): "))  # Recebe a coluna do jogador
            except ValueError:
                print("Por favor, digite apenas n√∫meros v√°lidos.")  # Caso o jogador digite letras
                continue

            if linha not in [0, 1, 2] or coluna not in [0, 1, 2]:
                print("Posi√ß√£o inv√°lida. Tente novamente.")  # Fora dos limites do tabuleiro
                continue

            if tabuleiro[linha][coluna] != " ":
                print("Essa posi√ß√£o j√° est√° ocupada!")  # Se a casa j√° estiver marcada
                continue

        tabuleiro[linha][coluna] = jogador  # Marca a jogada no tabuleiro

        if verificar_vitoria(tabuleiro, jogador):  # Verifica se o jogador venceu
            mostrar_tabuleiro(tabuleiro)  # Mostra o tabuleiro final
            if contra_maquina and jogador == 'O':
                print("\nü§ñ A m√°quina venceu!")  # Vit√≥ria da m√°quina
            else:
                print(f"\nüéâ Jogador {jogador} venceu!")  # Vit√≥ria do jogador humano
            break

        if verificar_empate(tabuleiro):  # Verifica se todas as casas est√£o preenchidas
            mostrar_tabuleiro(tabuleiro)
            print("\nü§ù Empate!")  # Mensagem de empate
            break

        jogador = 'O' if jogador == 'X' else 'X'  # Alterna entre os jogadores

# Submenu para escolher o modo do jogo da velha
def menu_jogo_da_velha():
    print('\n== JOGO DA VELHA ==')  # T√≠tulo do submenu
    print('1 - Modo 2 jogadores')  # Op√ß√£o para jogar entre 2 pessoas
    print('2 - Modo contra a m√°quina')  # Op√ß√£o para jogar contra o computador
    escolha = input('Escolha um modo: ')  # Recebe a escolha do jogador

    if escolha == '1':
        jogo_da_velha(contra_maquina=False)  # Chama o modo 2 jogadores
    elif escolha == '2':
        jogo_da_velha(contra_maquina=True)  # Chama o modo contra a m√°quina
    else:
        print('Op√ß√£o inv√°lida. Voltando ao menu principal.')  # Caso escolha inv√°lida

# Intru√ß√µes dos jogos
def ver_instrucoes():
    print("\n=== Instru√ß√µes ===")
    print("Jogo da Velha:") # Instru√ß√£o do jogo da velha
    print("- O tabuleiro √© 3x3.")
    print("- Dois jogadores alternam jogadas ou jogam contra a m√°quina.")
    print("- Ganha quem alinhar 3 s√≠mbolos (X ou O).")
    print("\nJogo da Adivinha√ß√£o:") # Instru√ß√£o do jogo Adivinha√ß√£o
    print("- Adivinhe um n√∫mero entre 1 e 100.")
    print("- O jogo d√° dicas se o n√∫mero √© maior ou menor.")

# Menu principal do programa
def menu():
    while True:
        print("\n=== MENU PRINCIPAL ===")  # Exibe o menu principal
        print("1 - Jogo da Adivinha√ß√£o")  # Primeira op√ß√£o
        print("2 - Jogo da Velha")  # Segunda op√ß√£o
        print("3 - Ver intru√ß√µes")  # Terceira op√ß√£o
        print("4 - Sair")  # Quarta op√ß√£o
        escolha = input("Escolha uma op√ß√£o (1, 2, 3 ou 4): ")  # Entrada da escolha

        if escolha == '1':
            jogo_adivinha√ß√£o()  # Inicia o jogo de adivinha√ß√£o
        elif escolha == '2':
            menu_jogo_da_velha()  # Vai para o menu do jogo da velha
        elif escolha == '3':
            ver_instrucoes() # Vai para as instru√ß√µes dos jogos
        elif escolha == '4':
            print('üëã Saindo do programa. At√© logo!')  # Mensagem de sa√≠da
            break  # Encerra o loop e o programa
        else:
            print('Op√ß√£o inv√°lida. Tente novamente.')  # Caso digite algo errado

# Chama o menu principal para iniciar o programa
menu()